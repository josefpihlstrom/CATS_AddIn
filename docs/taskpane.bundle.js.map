{"version":3,"file":"taskpane.bundle.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskpane/formatting.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["\r\n/**\r\n * Applies a thick outline border around the range B2:AM16 in the active worksheet.\r\n */\r\n\r\nexport async function applyThickOutlineBorder(context, sheet, rangeAddress) {\r\n    try {\r\n //       await Excel.run(async (context) => {\r\n//            const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n            const range = sheet.getRange(rangeAddress);\r\n\r\n            const borders = range.format.borders;\r\n\r\n            const borderItems = [\r\n                \"EdgeTop\",\r\n                \"EdgeBottom\",\r\n                \"EdgeLeft\",\r\n                \"EdgeRight\"\r\n            ];\r\n\r\n            for (let i = 0; i < borderItems.length; i++){\r\n                const border = borders.getItem(borderItems[i]);\r\n                border.style = Excel.BorderLineStyle.continuous;\r\n                border.color = \"black\";\r\n                border.weight = \"Thick\";\r\n            }\r\n\r\n            //await context.sync();\r\n//        });\r\n    } catch (error) {\r\n        console.error(\"Error in applyThickOutlineBorder:\", error.message);\r\n    }\r\n}\r\n\r\nexport async function applyThinInternalBorder(context, sheet,rangeAddress) {\r\n    try {\r\n //       await Excel.run(async (context) => {\r\n //           const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n            const range = sheet.getRange(rangeAddress);\r\n\r\n            const borders = range.format.borders;\r\n\r\n            const borderItems = [\r\n                \"InsideHorizontal\",\r\n                \"InsideVertical\"\r\n            ];\r\n\r\n            for (let i = 0; i < borderItems.length; i++){\r\n                const border = borders.getItem(borderItems[i]);\r\n                border.style = Excel.BorderLineStyle.continuous;\r\n                border.color = \"gray\";\r\n                border.weight = \"Thin\";\r\n            }\r\n\r\n            //await context.sync();\r\n //       });\r\n    } catch (error) {\r\n        console.error(\"Error in applyThinInternalBorder:\", error.message);\r\n    }\r\n}\r\n\r\nexport async function setColumnWidths(context, sheet, rangeAddress,width) {\r\n    try {\r\n //       await Excel.run(async (context) => {\r\n//            const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n\r\n            // Get the entire columns I through AM\r\n            const range = sheet.getRange(rangeAddress).getEntireColumn();\r\n            range.format.columnWidth = width;\r\n\r\n            //await context.sync();\r\n //       });\r\n    } catch (error) {\r\n        console.error(\"Error in setColumnWidths:\", error.message);\r\n    }\r\n}\r\n\r\nexport async function readCell(context, sheet, cellAddress) {\r\n    const range = sheet.getRange(cellAddress);\r\n    range.load(\"values\");\r\n    await context.sync();\r\n\r\n    return range.values[0][0]; // Assuming it's a single cell\r\n}\r\n\r\nexport async function writeInCell(context, sheet, rangeAddress,string) {\r\n    const range = sheet.getRange(rangeAddress);\r\n    range.values = [[string]];\r\n}\r\n\r\nexport async function formulaInCell(context, sheet, rangeAddress,string) {\r\n    const range = sheet.getRange(rangeAddress);\r\n    range.formulas = [[string]];\r\n}\r\n\r\n\r\nexport function getDaysOfWeek(context, sheet, year, month, holidays,endOfList) {\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-based\r\n    const holidayDates = holidays.map(h => h.date); // assuming 'YYYY-MM-DD'\r\n\r\n    // Fill actual days\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n        const dateObj = new Date(year, month, day);\r\n        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n        const dayOfWeek = dateObj.toLocaleDateString('en-US', { weekday: 'short' });\r\n\r\n        const colIndex = 8 + (day - 1); // I = 8\r\n        const colLetter = getColumnLetter(colIndex);\r\n\r\n        const isWeekend = [\"Sat\", \"Sun\"].includes(dayOfWeek);\r\n        const isHoliday = holidayDates.includes(dateStr);\r\n\r\n        writeInCell(context, sheet, `${colLetter}2`, dayOfWeek);\r\n        writeInCell(context, sheet, `${colLetter}3`, day);\r\n        writeInCell(context, sheet, `${colLetter}4`, (isWeekend || isHoliday) ? 0 : 8);\r\n\r\n        const range = sheet.getRange(`${colLetter}2:${colLetter}${endOfList+1}`);\r\n        if (isWeekend) {\r\n            range.format.fill.color = \"#D3D3D3\"; // gray\r\n        } else if (isHoliday) {\r\n            range.format.fill.color = \"#FF9999\"; // red\r\n        } else {\r\n            range.format.fill.color = \"white\"; // default\r\n        }\r\n    }\r\n\r\n    // Clear remaining columns up to day 31\r\n    for (let day = daysInMonth + 1; day <= 31; day++) {\r\n        const colIndex = 8 + (day - 1);\r\n        const colLetter = getColumnLetter(colIndex);\r\n\r\n        writeInCell(context, sheet, `${colLetter}2`, \"\");\r\n        writeInCell(context, sheet, `${colLetter}3`, \"\");\r\n        writeInCell(context, sheet, `${colLetter}4`, \"\");\r\n\r\n        const range = sheet.getRange(`${colLetter}2:${colLetter}4`);\r\n        range.format.fill.color = \"white\"; // reset color\r\n    }\r\n}\r\n\r\n\r\nexport async function getHolidays(year) {\r\n    try {\r\n        const holidaysResponse = await fetch(`https://api.dagsmart.se/holidays?year=${year}&weekends=true`);\r\n        if (!holidaysResponse.ok) throw new Error(\"Holiday API request failed\");\r\n        const holidays = await holidaysResponse.json();\r\n\r\n        const bridgeDaysResponse = await fetch(`https://api.dagsmart.se/bridge-days?year=${year}&weekends=false`);\r\n        if (!bridgeDaysResponse.ok) throw new Error(\"Bridge-day API request failed\");\r\n        const bridgeDaysRaw = await bridgeDaysResponse.json();\r\n\r\n        // Tag bridge days\r\n        const bridgeDays = bridgeDaysRaw.map(day => ({\r\n            ...day,\r\n            name: {\r\n                ...day.name,\r\n                en: \"Bridge Day\",\r\n                sv: \"Klämdag\"\r\n            }\r\n        }));\r\n\r\n        // Combine and sort\r\n        const combined = [...holidays, ...bridgeDays].sort((a, b) => {\r\n            return new Date(a.date) - new Date(b.date);\r\n        });\r\n\r\n        return combined;\r\n    } catch (error) {\r\n        console.error(\"Error fetching holidays and bridge-days:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function writeHolidaysToExcel(context, sheet, holidays,rowNumber) {\r\n    let i = 0;\r\n    sheet.getRange(`B${rowNumber}`).values = \"Holidays\"\r\n    holidays.forEach((holiday) => {\r\n        const nameEn = holiday.name?.en;\r\n        if (nameEn !== \"Saturday\" && nameEn !== \"Sunday\") {\r\n            const row = rowNumber + 1 + i;\r\n            sheet.getRange(`B${row}`).values = [[holiday.date]];\r\n            sheet.getRange(`C${row}`).values = [[holiday.name?.sv || \"\"]];\r\n            i++;\r\n        }\r\n    });\r\n}\r\n\r\nexport function getColumnLetter(colIndex) {\r\n  let letter = '';\r\n  while (colIndex >= 0) {\r\n    letter = String.fromCharCode((colIndex % 26) + 65) + letter;\r\n    colIndex = Math.floor(colIndex / 26) - 1;\r\n  }\r\n  return letter;\r\n}\r\n\r\nexport async function resetSheet(context, sheet) {\r\n    const range = sheet.getUsedRange();\r\n    range.load(\"address\"); // Load something to ensure it's accessible\r\n    await context.sync();  // Sync to populate the range\r\n\r\n    range.clear(Excel.ClearApplyTo.all); // Clear everything: values, formulas, formats, borders\r\n}\r\n\r\nexport async function findRow(context, sheet, rangeAddress, string) {\r\n    const range = sheet.getRange(rangeAddress);\r\n    range.load(\"values\");\r\n    await context.sync();\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n        const cellValue = range.values[i][0];\r\n        if (cellValue === string) {\r\n            console.log(`Found String at row ${i + 1}`);\r\n            return i + 1; // Excel rows are 1-based\r\n        }\r\n    }\r\n\r\n    console.error(\"String not found in column B rows 1–100.\");\r\n    return null;\r\n}\r\n\r\nexport async function clearContentsOnly(context, sheet, rangeAddress) {\r\n    const range = sheet.getRange(rangeAddress);\r\n    range.clear(Excel.ClearApplyTo.contents); // Clears values and formulas only\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\nimport { applyThickOutlineBorder, getDaysOfWeek } from \"./formatting\";\nimport { applyThinInternalBorder } from \"./formatting\";\nimport { setColumnWidths } from \"./formatting\";\nimport { writeInCell } from \"./formatting\";\nimport { getHolidays } from \"./formatting\";\nimport { writeHolidaysToExcel } from \"./formatting\";\nimport { formulaInCell } from \"./formatting\";\nimport { getColumnLetter } from \"./formatting\";\nimport { resetSheet } from \"./formatting\";\nimport { findRow } from \"./formatting\";\nimport { clearContentsOnly } from \"./formatting\";\nimport { readCell } from \"./formatting\";\n\nfunction populateYears() {\n    const yearSelect = document.getElementById(\"yearSelect\");\n    const currentYear = new Date().getFullYear();\n    for (let i = 0; i <= 5; i++) {\n        const year = currentYear + i;\n        const option = document.createElement(\"option\");\n        option.value = year;\n        option.text = year;\n        yearSelect.appendChild(option);\n    }\n}\n\nfunction setCurrentMonth() {\n    const monthSelect = document.getElementById(\"monthSelect\");\n    const months = [\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n    const currentMonth = new Date().getMonth();\n    months.forEach((month, index) => {\n        const option = document.createElement(\"option\");\n        option.value = month;\n        option.text = month;\n        if (index === currentMonth) {\n            option.selected = true;\n        }\n        monthSelect.appendChild(option);\n    });\n}\n\n\n\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        document.getElementById(\"runButton\").addEventListener(\"click\", handleRunClick);\n        populateYears();\n        setCurrentMonth();\n        document.querySelector('input[value=\"Update\"]').checked = true;\n    }\n});\n\n\n\nfunction handleRunClick() {\n    const selectedMode = document.querySelector('input[name=\"mode\"]:checked').value;\n\n    if (selectedMode === \"New\") {\n        runNewScript();\n    } else if (selectedMode === \"Update\") {\n        runUpdateScript();\n    }\n}\n\n\nfunction runNewScript() {\n    Excel.run(async (context) => {\n        console.log(\"Running New script...\");\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const yearSelected = yearSelect.value;\n        const monthSelect = document.getElementById(\"monthSelect\");\n        const monthNumber = monthSelect.selectedIndex; // 0-based index\n\n        // Clears all data in sheet\n        await resetSheet(context,sheet);\n\n        // Builds all the borders in sheet\n        applyThinInternalBorder(context,sheet,\"I2:AM18\");\n        applyThickOutlineBorder(context,sheet,\"B2:AM16\");\n        applyThickOutlineBorder(context,sheet,\"I2:AM16\");\n        applyThickOutlineBorder(context,sheet,\"B2:AM2\");\n        applyThickOutlineBorder(context,sheet,\"I2:AM4\");\n        applyThickOutlineBorder(context,sheet,\"B17:AM17\");\n        applyThickOutlineBorder(context,sheet,\"I17:AM17\");\n        applyThickOutlineBorder(context,sheet,\"I18:AM18\");\n        applyThickOutlineBorder(context,sheet,\"G18:H20\");\n        applyThinInternalBorder(context,sheet,\"G18:H20\");\n\n        // Sets all column widths in sheet\n        setColumnWidths(context,sheet,\"B:H\",60);\n        setColumnWidths(context,sheet,\"F:G\",100);\n        setColumnWidths(context,sheet,\"I:AM\",25);\n\n        // Writes all standard texts in sheet\n        writeInCell(context,sheet,\"B2\",\"CATS\");\n        writeInCell(context,sheet,\"B3\",\"Send.CCtr\");\n        writeInCell(context,sheet,\"C3\",\"ActTyp\");\n        writeInCell(context,sheet,\"D3\",\"Rec.Order\");\n        writeInCell(context,sheet,\"E3\",\"Trip\");\n        writeInCell(context,sheet,\"F3\",\"Confirmation Text\");\n        writeInCell(context,sheet,\"G3\",\"Internal Time\");\n        writeInCell(context,sheet,\"H3\",\"Total\");\n        writeInCell(context,sheet,\"F5\",\"Education/Training\");\n        writeInCell(context,sheet,\"G5\",\"20\")\n        writeInCell(context,sheet,\"F6\",\"Admin/Line work\");\n        writeInCell(context,sheet,\"G6\",\"21\");\n        writeInCell(context,sheet,\"F7\",\"Meetings/Events\");\n        writeInCell(context,sheet,\"G7\",\"22\");\n        writeInCell(context,sheet,\"F8\",\"Absence\");\n        writeInCell(context,sheet,\"G8\",\"23\");\n        writeInCell(context,sheet,\"B17\",\"EndOfList\")\n        writeInCell(context,sheet,\"H17\",\"Remaining\")\n        writeInCell(context,sheet,\"G18\",\"New Flex\")\n        formulaInCell(context,sheet,\"H18\",`=SUM(I18:AM18)`)\n        writeInCell(context,sheet,\"G19\",\"Saved Flex\")\n        writeInCell(context,sheet,\"H19\",\"0\")\n        writeInCell(context,sheet,\"G20\",\"Result\")\n        formulaInCell(context,sheet,\"H20\",`=SUM(H18:H19)`)\n\n        // Loops through and writes all summary formulas in column H\n        for (let rowIndex = 4; rowIndex <=16; rowIndex++) {\n            const formula = `=SUM(I${rowIndex}:AM${rowIndex})`;\n            await formulaInCell(context,sheet,`H${rowIndex}`,formula)\n        }\n\n        // Loops through and writes all summary formulas in row 17\n        for (let colIndex = 8; colIndex <= 38; colIndex++) {\n            const colLetter = getColumnLetter(colIndex);\n            const formula = `=${colLetter}4-SUM(${colLetter}5:${colLetter}16)`;\n            await formulaInCell(context, sheet, `${colLetter}17`, formula);\n        }\n\n        // Fetches all swedish holidays and writes them to sheet\n        const holidays = await getHolidays(yearSelected);\n        writeHolidaysToExcel(context,sheet,holidays,20);\n\n        // Loops through and writes days, checking if days are weekends or holidays and updates accordingly\n        getDaysOfWeek(context,sheet,yearSelected,monthNumber,holidays,\"17\");\n\n        // Updates sheet\n        await context.sync();\n\n    });\n}\n\nfunction runUpdateScript() {\n    console.log(\"Running Update script...\");\n    Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const yearSelected = yearSelect.value;\n        const monthSelect = document.getElementById(\"monthSelect\");\n        const monthNumber = monthSelect.selectedIndex; // 0-based index\n\n        // Find position of start and end to be used later\n        const startRow = await findRow(context,sheet,\"B1:B100\", \"CATS\") +3 ;\n        const endRow = await findRow(context, sheet, \"B1:B100\", \"EndOfList\");\n\n        // Delete all recorded hours for the month\n        await clearContentsOnly(context,sheet, `I${startRow}:AM${endRow-1}`);\n\n        // fetch holidays\n        const holidays = await getHolidays(yearSelected);\n\n        // Update days of the month\n        getDaysOfWeek(context,sheet,yearSelected,monthNumber,holidays,endRow);\n\n        // Move value of Flex Result cell to Saved Cell\n        const savedFlex = await readCell(context,sheet,`H${endRow+3}`);\n        writeInCell(context,sheet,`H${endRow+2}`,savedFlex);\n\n        // Delete all recorded flex for the month\n        await clearContentsOnly(context,sheet, `I${endRow+1}:AM${endRow+1}`);\n\n        // Updates sheet\n        await context.sync();\n\n    });\n}\n\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","applyThickOutlineBorder","_x","_x2","_x3","_applyThickOutlineBorder","_callee","context","sheet","rangeAddress","range","borders","borderItems","border","_context","getRange","format","getItem","style","Excel","BorderLineStyle","continuous","color","weight","error","console","message","applyThinInternalBorder","_x4","_x5","_x6","_applyThinInternalBorder","_callee2","_context2","setColumnWidths","_x7","_x8","_x9","_x0","_setColumnWidths","_callee3","width","_context3","getEntireColumn","columnWidth","readCell","_x1","_x10","_x11","_readCell","_callee4","cellAddress","_context4","load","sync","values","writeInCell","_x12","_x13","_x14","_x15","_writeInCell","_callee5","string","_context5","formulaInCell","_x16","_x17","_x18","_x19","_formulaInCell","_callee6","_context6","formulas","getDaysOfWeek","year","month","holidays","endOfList","daysInMonth","Date","getDate","holidayDates","map","h","date","day","dateObj","dateStr","concat","String","padStart","dayOfWeek","toLocaleDateString","weekday","colLetter","getColumnLetter","isWeekend","includes","isHoliday","fill","getHolidays","_x20","_getHolidays","_callee7","holidaysResponse","bridgeDaysResponse","bridgeDaysRaw","bridgeDays","combined","_t","_context7","fetch","ok","Error","json","_objectSpread","name","en","sv","_toConsumableArray","sort","b","writeHolidaysToExcel","rowNumber","forEach","holiday","_holiday$name","nameEn","_holiday$name2","row","colIndex","letter","fromCharCode","Math","floor","resetSheet","_x21","_x22","_resetSheet","_callee8","_context8","getUsedRange","clear","ClearApplyTo","all","findRow","_x23","_x24","_x25","_x26","_findRow","_callee9","_context9","log","clearContentsOnly","_x27","_x28","_x29","_clearContentsOnly","_callee0","_context0","contents","handleRunClick","selectedMode","document","querySelector","run","_ref","yearSelected","monthSelect","monthNumber","rowIndex","formula","_formula","workbook","worksheets","getActiveWorksheet","yearSelect","getElementById","selectedIndex","_ref2","startRow","endRow","savedFlex","Office","onReady","info","currentMonth","host","HostType","addEventListener","currentYear","getFullYear","option","createElement","text","appendChild","populateYears","getMonth","index","selected","checked"],"sourceRoot":""}